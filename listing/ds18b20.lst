C51 COMPILER V9.60.0.0   DS18B20                                                           12/13/2020 01:17:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN ..\output\ds18b20.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\source\ds18b20.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(..
                    -\listing\ds18b20.lst) TABS(2) OBJECT(..\output\ds18b20.obj)

line level    source

   1          #include <reg52.h>
   2          #include "ds18b20.h"
   3          #include "delay.h" 
   4          #include <string.h>
   5          #include <intrins.h>
   6          
   7          
   8          
   9          
  10          void DS18B20_init1()
  11          {  
  12   1      
  13   1             DQ1=0;
  14   1             delay_us(60);    //延时480到960us
  15   1             DQ1=1;
  16   1             delay_us(8);   
  17   1             delay_us(40);   
  18   1             
  19   1      }
  20          
  21          
  22          
  23          void write_byte1(uchar dat)   //写一个字节
  24          {
  25   1         uchar i;
  26   1         for(i=0;i<8;i++)
  27   1         {
  28   2            DQ1=0;  //每写入一位数据之前先把总线拉低1us
  29   2           DQ1=dat&0x01;    //取最低位写入
  30   2           delay_us(6);   //延时68us，持续时间最少60us
  31   2           DQ1=1;   //然后释放总线
  32   2           dat=dat>>1;    //从低位开始写
  33   2           delay_us(1);
  34   2         }
  35   1      
  36   1      }
  37          
  38          
  39          uchar read_byte1()    //读一个字节
  40          {
  41   1        uchar i,dat=0;
  42   1        for(i=0;i<8;i++)
  43   1        {
  44   2           DQ1=0;  //先将总线拉低1us
  45   2      _nop_();
  46   2          DQ1=1;//然后释放总线
  47   2           dat=dat>>1;       //从最低位开始读
  48   2           if(DQ1)
  49   2           dat=dat|0x80;   //每次读一位
  50   2           delay_us(5);   //读取完之后等待48us再接着读取下一个数
  51   2         }
  52   1         return dat;
  53   1      }
  54          
C51 COMPILER V9.60.0.0   DS18B20                                                           12/13/2020 01:17:49 PAGE 2   

  55          
  56          
  57          
  58          
  59          
  60          
  61          
  62          
  63          uint read_temper1 ()
  64          {    
  65   1         uchar a,b;         
  66   1         uint t=0;
  67   1        EA=0;
  68   1         DS18B20_init1();       
  69   1         write_byte1(0xcc);   //跳过ROM操作命令
  70   1         write_byte1(0x44);     //发送启动温度转换命令
  71   1         DS18B20_init1();       
  72   1         write_byte1(0xcc);    //跳过ROM操作命令
  73   1         write_byte1(0xbe);      //发送读温度寄存器命令
  74   1         a=read_byte1();    //先读低八位
  75   1         b=read_byte1();      //再读高八位
  76   1         EA=1; 
  77   1         t=b;        
  78   1         t<<=8;      //左移八位
  79   1         t=t|a;      //t为16位的数，使高八位为b的值，低八位为a的值  
  80   1         return t;    //返回温度值
  81   1      
  82   1      }
  83          
  84          
  85          
  86          
  87          
  88          uint temper_change1()
  89          {
  90   1          uint temper;
  91   1          float tp;
  92   1          temper=read_temper1();
  93   1          if(temper<0)    //考虑负温度的情况
  94   1          {
  95   2              temper=temper-1;
  96   2              temper=~temper;
  97   2              tp=temper*0.0625;  //16位温度转换成10进制的温度
  98   2              temper=tp*100+0.5;   //留两个小数点，并四舍五入
  99   2          }
 100   1          else
 101   1          {
 102   2              tp=temper*0.0625;  //16位温度转换成10进制的温度
 103   2              temper=tp*100+0.5;  //留两个小数点，并四舍五入
 104   2          }
 105   1          return temper;
 106   1      }
 107          
 108          void DS18B20_init2()
 109          {  
 110   1      
 111   1             DQ2=0;
 112   1             delay_us(60);    //延时480到960us
 113   1             DQ2=1;
 114   1             delay_us(8);   
 115   1             delay_us(40);   
 116   1             
C51 COMPILER V9.60.0.0   DS18B20                                                           12/13/2020 01:17:49 PAGE 3   

 117   1      }
 118          
 119          
 120          
 121          void write_byte2(uchar dat)   //写一个字节
 122          {
 123   1         uchar i;
 124   1         for(i=0;i<8;i++)
 125   1         {
 126   2            DQ2=0;  //每写入一位数据之前先把总线拉低1us
 127   2           DQ2=dat&0x01;    //取最低位写入
 128   2           delay_us(6);   //延时68us，持续时间最少60us
 129   2           DQ2=1;   //然后释放总线
 130   2           dat=dat>>1;    //从低位开始写
 131   2           delay_us(1);
 132   2         }
 133   1      
 134   1      }
 135          
 136          
 137          uchar read_byte2()    //读一个字节
 138          {
 139   1        uchar i,dat=0;
 140   1        for(i=0;i<8;i++)
 141   1        {
 142   2           DQ2=0;  //先将总线拉低1us
 143   2      _nop_();
 144   2          DQ2=1;  //然后释放总线
 145   2           dat=dat>>1;       //从最低位开始读
 146   2           if(DQ2)
 147   2           dat=dat|0x80;   //每次读一位
 148   2           delay_us(5);   //读取完之后等待48us再接着读取下一个数
 149   2         }
 150   1         return dat;
 151   1      }
 152          
 153          
 154          
 155          
 156          
 157          
 158          
 159          
 160          
 161          uint read_temper2 ()
 162          {    
 163   1         uchar a,b;         
 164   1         uint t=0;
 165   1        EA=0;
 166   1         DS18B20_init2();       
 167   1         write_byte2(0xcc);   //跳过ROM操作命令
 168   1         write_byte2(0x44);     //发送启动温度转换命令
 169   1         DS18B20_init2();       
 170   1         write_byte2(0xcc);    //跳过ROM操作命令
 171   1         write_byte2(0xbe);      //发送读温度寄存器命令
 172   1         a=read_byte2();    //先读低八位
 173   1         b=read_byte2();      //再读高八位 
 174   1         EA=1;
 175   1         t=b;        
 176   1         t<<=8;      //左移八位
 177   1         t=t|a;      //t为16位的数，使高八位为b的值，低八位为a的值  
 178   1         return t;    //返回温度值
C51 COMPILER V9.60.0.0   DS18B20                                                           12/13/2020 01:17:49 PAGE 4   

 179   1        
 180   1      }
 181          
 182          
 183          
 184          
 185          
 186          uint temper_change2()
 187          {
 188   1          uint temper;
 189   1          float tp;
 190   1          temper=read_temper2();
 191   1          if(temper<0)    //考虑负温度的情况
 192   1          {
 193   2              temper=temper-1;
 194   2              temper=~temper;
 195   2              tp=temper*0.0625;  //16位温度转换成10进制的温度
 196   2              temper=tp*100+0.5;   //留两个小数点，并四舍五入
 197   2          }
 198   1          else
 199   1          {
 200   2              tp=temper*0.0625;  //16位温度转换成10进制的温度
 201   2              temper=tp*100+0.5;  //留两个小数点，并四舍五入
 202   2          }
 203   1          return temper;
 204   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    496    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
